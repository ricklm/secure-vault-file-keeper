import React, { useState, useRef, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { 
  Shield, 
  Upload, 
  Download, 
  Lock, 
  Unlock, 
  Eye, 
  EyeOff,
  FileText,
  AlertTriangle,
  CheckCircle,
  FileIcon
} from 'lucide-react';
import { 
  encryptFile, 
  decryptFile, 
  isEncryptedFile, 
  downloadBlob, 
  formatFileSize 
} from '@/lib/crypto';
import cryptoHero from '@/assets/crypto-hero.jpg';

interface FileInfo {
  file: File;
  size: string;
  type: string;
}

// ErrorBoundary para capturar erros inesperados
class ErrorBoundary extends React.Component<{ children: React.ReactNode }, { hasError: boolean; error: any }> {
  constructor(props: { children: React.ReactNode }) {
    super(props);
    this.state = { hasError: false, error: null };
  }
  
  static getDerivedStateFromError(error: any) {
    return { hasError: true, error };
  }
  
  componentDidCatch(error: any, info: any) {
    console.error('ErrorBoundary capturou um erro:', error, info);
  }
  
  render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen flex flex-col items-center justify-center bg-background p-8">
          <h2 className="text-2xl font-bold mb-4 text-destructive">Ocorreu um erro inesperado</h2>
          <p className="mb-2 text-muted-foreground">{this.state.error?.message || 'Erro desconhecido.'}</p>
          <button
            className="mt-4 px-6 py-2 bg-primary text-primary-foreground rounded"
            onClick={() => window.location.reload()}
          >
            Recarregar página
          </button>
        </div>
      );
    }
    return this.props.children;
  }
}

export default function CryptoApp() {
  // Estados do componente
  const [selectedFile, setSelectedFile] = useState<FileInfo | null>(null);
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [processing, setProcessing] = useState(false);
  const [progress, setProgress] = useState(0);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [isEncrypted, setIsEncrypted] = useState(false);
  
  // Refs e hooks
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();
  
  // Efeito para verificar se o arquivo selecionado está criptografado
  useEffect(() => {
    const checkIfEncrypted = async () => {
      if (selectedFile) {
        try {
          const encrypted = await isEncryptedFile(selectedFile.file);
          setIsEncrypted(encrypted);
        } catch (error) {
          console.error('Erro ao verificar arquivo:', error);
          setIsEncrypted(false);
        }
      } else {
        setIsEncrypted(false);
      }
    };
    
    checkIfEncrypted();
  }, [selectedFile]);
  
  // Função para simular progresso
  const simulateProgress = () => {
    let progress = 0;
    const interval = setInterval(() => {
      progress += Math.random() * 15;
      if (progress > 90) progress = 90; // Não chegar a 100% até terminar
      setProgress(progress);
    }, 300);
    
    return interval;
  };
  
  // Função para limpar o formulário
  const resetForm = () => {
    setSelectedFile(null);
    setPassword('');
    setError(null);
    setSuccess(null);
    setProgress(0);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };
  
  // Manipulador de seleção de arquivo
  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      try {
        // Verifica se é um arquivo criptografado
        const encrypted = await isEncryptedFile(file);
        
        setSelectedFile({
          file,
          size: formatFileSize(file.size),
          type: encrypted ? 'application/octet-stream' : (file.type || 'application/octet-stream')
        });
        
        setError(null);
        setSuccess(null);
      } catch (error) {
        console.error('Erro ao processar o arquivo:', error);
        setError('Erro ao processar o arquivo. Certifique-se de que é um arquivo válido.');
      }
    }
  };
  
  // Função para lidar com a criptografia
  const handleEncrypt = async () => {
    if (!selectedFile) {
      setError('Por favor, selecione um arquivo');
      return;
    }

    if (!password) {
      setError('Por favor, digite uma senha para criptografar o arquivo');
      return;
    }

    setProcessing(true);
    setError(null);
    setSuccess(null);
    
    const progressInterval = simulateProgress();

    try {
      const result = await encryptFile(selectedFile.file, password);
      
      clearInterval(progressInterval);
      setProgress(100);
      
      downloadBlob(result.blob, result.filename);
      
      setSuccess(`Arquivo criptografado com sucesso! Download iniciado: ${result.filename}`);
      
      toast({
        title: "Criptografia concluída",
        description: "Arquivo criptografado e pronto para download",
      });
      
      // Reset form after success
      setTimeout(() => resetForm(), 3000);
      
    } catch (error) {
      clearInterval(progressInterval);
      setProgress(0);
      const errorMessage = error instanceof Error ? error.message : 'Erro na criptografia';
      setError(errorMessage);
      
      toast({
        title: "Erro na criptografia",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setProcessing(false);
    }
  };
  
  // Função para lidar com a descriptografia
  const handleDecrypt = async () => {
    if (!selectedFile) {
      setError('Por favor, selecione um arquivo .enc');
      return;
    }

    if (!password) {
      setError('Por favor, digite a senha para descriptografar o arquivo');
      return;
    }

    setProcessing(true);
    setError(null);
    setSuccess(null);
    
    const progressInterval = simulateProgress();

    try {
      // Verifica novamente se o arquivo está criptografado
      const encrypted = await isEncryptedFile(selectedFile.file);
      if (!encrypted) {
        throw new Error('O arquivo selecionado não é um arquivo criptografado válido');
      }
      
      const result = await decryptFile(selectedFile.file, password);
      
      clearInterval(progressInterval);
      setProgress(100);
      
      downloadBlob(result.blob, result.filename);
      
      setSuccess(`Arquivo descriptografado com sucesso! Download iniciado: ${result.filename}`);
      
      toast({
        title: "Descriptografia concluída",
        description: "Arquivo descriptografado e pronto para download",
      });
      
      // Reset form after success
      setTimeout(() => resetForm(), 3000);
      
    } catch (error) {
      clearInterval(progressInterval);
      setProgress(0);
      const errorMessage = error instanceof Error ? error.message : 'Erro na descriptografia';
      setError(errorMessage);
      
      toast({
        title: "Erro na descriptografia",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setProcessing(false);
    }
  };

  return (
    <ErrorBoundary>
      <div className="min-h-screen bg-background p-4">
        <div className="max-w-2xl mx-auto">
          {/* Seção Hero */}
          <div className="relative mb-12 overflow-hidden rounded-xl">
            <div 
              className="absolute inset-0 bg-cover bg-center opacity-20"
              style={{ backgroundImage: `url(${cryptoHero})` }}
            />
            <div className="absolute inset-0 bg-gradient-to-r from-background via-background/50 to-background" />
            <div className="relative text-center py-16 px-6">
              <div className="flex items-center justify-center gap-3 mb-6">
                <Shield className="w-12 h-12 text-primary" />
                <h1 className="text-5xl font-bold bg-gradient-primary bg-clip-text text-transparent">
                  CryptoFile
                </h1>
              </div>
              <p className="text-xl text-muted-foreground mb-8 max-w-2xl mx-auto">
                Proteja seus arquivos com criptografia AES-256. 
                Simples, seguro e completamente offline.
              </p>
            </div>
          </div>

          {/* Card Principal */}
          <Card className="backdrop-blur-sm bg-gradient-card border-border/50 shadow-lg">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                {isEncrypted ? (
                  <>
                    <Unlock className="w-5 h-5 text-warning" />
                    Descriptografar Arquivo
                  </>
                ) : (
                  <>
                    <Lock className="w-5 h-5 text-primary" />
                    Criptografar Arquivo
                  </>
                )}
              </CardTitle>
              <CardDescription>
                {isEncrypted 
                  ? "Selecione um arquivo .enc e digite a senha para descriptografar"
                  : "Selecione um arquivo e defina uma senha forte para criptografar"
                }
              </CardDescription>
            </CardHeader>

            <CardContent className="space-y-6">
              {/* Seleção de Arquivo */}
              <div className="space-y-2">
                <Label htmlFor="file-input">Selecionar Arquivo</Label>
                <div className="relative">
                  <Input
                    id="file-input"
                    type="file"
                    ref={fileInputRef}
                    onChange={handleFileSelect}
                    className="file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-medium file:bg-primary file:text-primary-foreground hover:file:bg-primary/90"
                    accept={isEncrypted ? ".enc" : "*"}
                  />
                  <Upload className="absolute right-3 top-3 w-4 h-4 text-muted-foreground pointer-events-none" />
                </div>
                {selectedFile && (
                  <div className="flex items-center gap-2 text-sm text-muted-foreground">
                    <FileText className="w-4 h-4 flex-shrink-0" />
                    <span className="truncate">{selectedFile.file.name}</span>
                    <Badge variant="outline" className="ml-auto">
                      {selectedFile.size}
                    </Badge>
                  </div>
                )}
              </div>

              {/* Campo de Senha */}
              <div className="space-y-2">
                <Label htmlFor="password">
                  {isEncrypted ? "Senha para descriptografar" : "Definir senha"}
                </Label>
                <div className="relative">
                  <Input
                    id="password"
                    type={showPassword ? "text" : "password"}
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    placeholder={isEncrypted ? "Digite a senha do arquivo" : "Crie uma senha forte"}
                    className="pr-10"
                    disabled={processing}
                  />
                  <button
                    type="button"
                    className="absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground"
                    onClick={() => setShowPassword(!showPassword)}
                    disabled={processing}
                  >
                    {showPassword ? (
                      <EyeOff className="w-4 h-4" />
                    ) : (
                      <Eye className="w-4 h-4" />
                    )}
                  </button>
                </div>
                {!isEncrypted && (
                  <p className="text-xs text-muted-foreground">
                    Use pelo menos 8 caracteres, incluindo letras, números e símbolos
                  </p>
                )}
              </div>

              {/* Barra de Progresso */}
              {processing && (
                <div className="space-y-2">
                  <div className="flex justify-between text-sm text-muted-foreground">
                    <span>{isEncrypted ? "Descriptografando..." : "Criptografando..."}</span>
                    <span>{Math.round(progress)}%</span>
                  </div>
                  <Progress value={progress} className="h-2" />
                </div>
              )}

              {/* Mensagem de Erro */}
              {error && (
                <Alert variant="destructive" className="border-destructive/20">
                  <AlertTriangle className="h-4 w-4" />
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}

              {/* Mensagem de Sucesso */}
              {success && (
                <Alert className="border-success bg-success/10">
                  <CheckCircle className="h-4 w-4 text-success" />
                  <AlertDescription className="text-success">{success}</AlertDescription>
                </Alert>
              )}

              {/* Botões de Ação */}
              <div className="flex gap-3">
                <Button
                  onClick={isEncrypted ? handleDecrypt : handleEncrypt}
                  disabled={!selectedFile || !password || processing}
                  className="flex-1"
                  size="lg"
                >
                  {processing ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-primary-foreground mr-2" />
                      Processando...
                    </>
                  ) : isEncrypted ? (
                    <>
                      <Unlock className="w-4 h-4 mr-2" />
                      Descriptografar
                    </>
                  ) : (
                    <>
                      <Lock className="w-4 h-4 mr-2" />
                      Criptografar
                    </>
                  )}
                </Button>
                
                <Button
                  onClick={resetForm}
                  variant="outline"
                  disabled={processing}
                  size="lg"
                >
                  Limpar
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Informações de Segurança */}
          <div className="mt-8 p-4 bg-secondary/30 rounded-lg border">
            <div className="flex items-start gap-3">
              <Shield className="w-5 h-5 text-primary mt-0.5 flex-shrink-0" />
              <div>
                <h3 className="font-semibold mb-2">Como funciona</h3>
                <div className="space-y-3 text-sm text-muted-foreground">
                  <p>
                    Seus arquivos são criptografados diretamente no seu navegador usando o algoritmo AES-256, 
                    um dos mais seguros disponíveis atualmente.
                  </p>
                  <p>
                    <strong>Importante:</strong> Nunca compartilhe sua senha. Sem ela, não é possível recuperar 
                    os arquivos criptografados.
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </ErrorBoundary>
  );
}
